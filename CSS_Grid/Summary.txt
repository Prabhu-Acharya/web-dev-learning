====================================
         CSS GRID CHEATSHEET
====================================

👨‍💻 GRID CONTAINER BASICS
------------------------------
display: grid;             → enables grid layout
width / height             → set container dimensions
grid-template-columns      → defines number/size of columns
grid-template-rows         → defines number/size of rows
gap / row-gap / column-gap → spacing between items

Example:
.container {
  display: grid;
  grid-template-columns: 120px 100px;
  grid-template-rows: 80px 80px;
  column-gap: 20px;
  row-gap: 10px;
}

📌 SHORTHAND: repeat(), minmax()
------------------------------------
repeat(n, value) → repeats a value n times

minmax(min, max) → sets min and max size

Example:
grid-template-columns: repeat(4, minmax(100px, 1fr));
grid-template-columns: repeat(4, 80px); // 4 equal columns

📌 NAMED GRID LINES
-------------------------
grid-template-columns: [start] 120px [middle] 100px [end];

Then reference like:
grid-column: start / end;

⚙️ ITEM PLACEMENT BY LINES
------------------------------
grid-column: <start> / <end>
grid-row: <start> / <end>

grid-column-start: 1;
grid-column-end: 3;

grid-row: 1 / 3;   → spans from row line 1 to 3

Example:
.item-1 {
  grid-row: 1 / 2;
  grid-column: 1 / 3;
}

🧩 GRID AREA NAMING
----------------------------
grid-template-areas:
  "nav nav nav"
  "side content content"
  "footer footer footer";

Then assign:
.item-1 { grid-area: nav; }
.item-2 { grid-area: side; }
.item-3 { grid-area: content; }
.item-4 { grid-area: footer; }

ℹ️ Overlapping:
Two elements with same `grid-area` will overlap.

🎯 GRID ALIGNMENT
----------------------------
justify-items: start | end | center | stretch;
align-items: start | end | center | stretch;

justify-content: start | center | space-between | space-around;
align-content: start | center | stretch;

✅ Example:
.container {
  justify-items: center;
  align-items: center;
}

🔄 AUTO FLOW
----------------------------
grid-auto-flow: row | column;

When you don't specify rows/columns, this defines how new items flow.

💡 COMMON EXAMPLE
----------------------------
.container {
  display: grid;
  grid-template-columns: repeat(3, 1fr);
  grid-template-rows: auto auto;
  grid-template-areas:
    "header header header"
    "sidebar content content"
    "footer footer footer";
  gap: 10px;
}

.item-1 { grid-area: header; }
.item-2 { grid-area: sidebar; }
.item-3 { grid-area: content; }
.item-4 { grid-area: footer; }

==============================
 TIPS & TRICKS
==============================
✔ Use `fr` units for flexible grids
✔ `minmax()` ensures responsive bounds
✔ Prefer `repeat()` for cleaner code
✔ Use `grid-area` for semantic layouts
✔ Named lines help advanced positioning
✔ Avoid overlapping unless layering on purpose

